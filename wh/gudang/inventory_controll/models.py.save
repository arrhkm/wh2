from django.db import models

# Create your models here.

class ItemAttributes(models.Model):
	attr_name = models.CharField(max_length=45, verbose_name="Item Measurement Attributes")

	def __str__(self):
		return self.attr_name
	
class ItemCategory(models.Model):
	item_category_name = models.CharField(max_length=45, verbose_name="Category Name")

	def __str__(self):
		return self.item_category_name

class ItemRegister(models.Model):
	code_reg = models.CharField(max_length=45, verbose_name="Code")
	name_reg = models.CharField(max_length=45, verbose_name="Register Name")

	def __str__(self):
		return self.code_reg

class Item(models.Model):
	code = models.CharField(max_length=20, primary_key=True)
	item_name = models.CharField(verbose_name="Item Name", max_length=255)
	item_qty = models.DecimalField(verbose_name="Quantity", max_digits=12, decimal_places=2, null=True)
	item_register = models.ForeignKey(ItemRegister, verbose_name="SAP Registered")
	item_category = models.ForeignKey(ItemCategory, verbose_name="Category")
	item_attribute = models.ForeignKey(ItemAttributes, verbose_name="ItemAttributes")

	def __str__(self):
		return self.item_name

	def update_stock(self):
		total_stock = 0
		
		for good in self.good_received_po.all():
			total_stock += good.grpo_qty
			for issued in good.good_issued_po.all():
				total_stock -= issued.qty_issued

		self.item_qty = total_stock
		self.save(update_fields=['item_qty'])

class Bin(models.Model):
	name_location = models.CharField(max_length=45)

	def __str__(self):
		return self.name_location

class SalesOrder(models.Model):
	so_number = models.PositiveIntegerField(primary_key=True)
	so_name = models.CharField(max_length=45)
	so_dscription = models.CharField(max_length=225)

	def __str__(self):
		return str(self.so_number)
	
class SalesOrderPhase(models.Model):	
	phase_number = models.PositiveIntegerField()
	phase_name = models.CharField(max_length=45)
	phase_dscription = models.CharField(max_length=225)
	sales_order = models.ForeignKey(SalesOrder)

	def __str__(self):
		return str(self.sales_order.so_number) + "-" + str(self.phase_number)

class PurchaseOrder(models.Model):
	po_number = models.PositiveIntegerField(primary_key=True)
	supplier_name = models.CharField(max_length=45)
	phase_number = models.ForeignKey(SalesOrderPhase)
	
	class Meta:
		verbose_name

	def __str__(self):
		return str(self.po_number)

class GrPo(models.Model):
	po_number = models.ForeignKey(PurchaseOrder, verbose_name="Purchase Order")
	item_code = models.ForeignKey(Item, verbose_name="Item", related_name='good_received_po')
	bin_id = models.ForeignKey(Bin, verbose_name="Bin")
	date_create = models.DateField(verbose_name="Date Created", auto_now_add=True)
	grpo_qty = models.DecimalField(verbose_name="Quantity", max_digits=12, decimal_places=2)

	class Meta:
		unique_together = ('po_number', 'item_code')
		verbose_name = 'Good Received with PO'
		verbose_name_plural = 'Good Received with PO'

	def __str__(self):
		return str(self.po_number) +"-"+ str(self.item_code.code) +"-"+ str(self.item_code.item_name)

	def save(self, *args, **kwargs):
		if self.pk is not None:
			obj = GrPo.objects.get(pk=self.pk)
			self.item_code.item_qty -= obj.grpo_qty
			self.item_code.item_qty += self.grpo_qty
		else:
			self.item_code.item_qty += self.grpo_qty

		super(GrPo, self).save(*args, **kwargs)
		self.item_code.save(update_fields=['item_qty'])

	def delete(self):
		obj = GrPo.objects.get(pk=self.pk)
		self.item_code.item_qty -= obj.grpo_qty
		print("deleting")
		self.item_code.save(update_fields=['item_qty'])
		super(GrPo, self).delete()

	def get_item_code(self):
		return self.item_code.code + self.item_code.item_name

	get_item_code.short_description = "Item Code"

class GoodIssuedType(models.Model):
	good_issued_name = models.CharField(max_length=45)

	def __str__(self):
		return str(self.good_issued_name)

class GoodIssued(models.Model):
	issued_number = models.PositiveIntegerField(primary_key=True)
	date_create = models.DateField(auto_now_add=False)
	dscription = models.CharField(max_length=225)
	qty_issued = models.DecimalField(max_digits=12, decimal_places = 2)
	received_by = models.CharField(max_length=45)
	sent_location = models.CharField(max_length=45)
	issued_status = models.IntegerField()
	good_issued_type_id = models.ForeignKey(GoodIssuedType)
	grpo = models.ForeignKey(GrPo, related_name='good_issued_po')	

	def __str__(self):
		return str(self.issued_number)

	def save(self, *args, **kwargs):
		super(GoodIssued, self).save(*args, **kwargs)
		self.grpo.item_code.update_stock()

class GoodReceiveNoPo(models.Model):
	date_create = models.DateField(auto_now_add=True)
	grnopo_qty = models.DecimalField(max_digits=12, decimal_places=2)
	item_id = models.ForeignKey(Item)
	sales_order_phase_id = models.ForeignKey(SalesOrderPhase)
	bin_id = models.ForeignKey(Bin)

	def __str__(self):
		return str(self.sales_order_phase_id)+ "-" + str(self.item_id.code)

class GoodIssuedNoPo(models.Model):
	grnopo_id = models.ForeignKey(GoodReceiveNoPo)
	date_create	= models.DateField(auto_now_add=True)
	ginopo_qty	= models.DecimalField(max_digits=12, decimal_places=2)
	dscription = models.CharField(max_length=225)
	received_by	= models.CharField(max_length=45)
	sent_location = models.CharField(max_length=45)
	status = models.PositiveIntegerField()	
	good_issued_type_id = models.ForeignKey(GoodIssuedType)

	def __str__(self):
		return str(self.id)
